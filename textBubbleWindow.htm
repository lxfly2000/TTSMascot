<html>
	<head>
		<title>Text Bubble</title>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width,user-scalable=no"/>
		<style>
			.BubbleTextOutline{
                -webkit-text-stroke: white 6px;
                /*text-shadow: 6px 6px 3px gray;*/
			}
            .BubbleText{
                color: #58A33C;
            }
            .BubbleBox{
                border-radius: 20px;
                color: transparent;
                background-color: white;
                /*filter: drop-shadow(6px 6px 3px gray);*/
            }
            .BubbleArrow{
				transform: translate(-50%, -50%);
				position: absolute;
				top: 50%;
				left: 50%;
                width: 100%;
                height: 100%;
                background-color: white;
                /*clip-path: polygon(50% 40%, 100% 50%, 50% 60%);*/
                -webkit-app-region: drag;
            }
            .SetText{
                padding: 20px;
				position: absolute;
                font-size: 36;
                font-weight: 800;
                box-sizing: border-box;
                -webkit-app-region: drag;
            }
            body{
                /*隐藏可视区域外的元素，这会导致页面无法滚动，同时滚动条消失*/
                overflow: hidden;
                /*background-color: skyblue;*/
            }
            .BubbleBoxCombine{
                opacity: 50%;
            }
		</style>
	</head>
	<body>
        <div class="BubbleBoxCombine">
            <div class="BubbleArrow"></div>
            <div class="BubbleBox SetText">Text Bubble<br>文本显示</div>
        </div>
		<div class="BubbleTextOutline SetText">Text Bubble<br>文本显示</div>
		<div class="BubbleText SetText">Text Bubble<br>文本显示</div>
	</body>
	<script>
		const {ipcRenderer} = require('electron');
		window.addEventListener('DOMContentLoaded', () => {
			ipcRenderer.on('setText',(event,data)=>{
                window.seatIndex=data.seat;
                for(var d of document.getElementsByClassName('SetText')){
                    d.style.transform='';
                    d.style.top='';
                    d.style.left='';
                    d.style.width='';
                    d.style.height='';
                    d.innerText=data.msg;
                }
                document.getElementsByClassName('BubbleTextOutline')[0].style['-webkit-text-stroke']=data.color2+' 6px';
                document.getElementsByClassName('BubbleText')[0].style.color=data.color1;
                var rect=document.getElementsByClassName('BubbleBox')[0].getBoundingClientRect();
                for(var d of document.getElementsByClassName('SetText')){
                    d.style.transform='translate(-50%, -50%)';
                    d.style.top='50%';
                    d.style.left='50%';
                    d.style.width=rect.width+'px';
                    d.style.height=rect.height+'px';
                }
                var crData={
                    seat:window.seatIndex,
                    width:rect.width,
                    height:rect.height
                };
                ipcRenderer.send('computedRect',crData);
			});
            function rotXY(_x,_y,_theta){
                let r=Math.sqrt(_x*_x+_y*_y);
                let t=Math.atan2(_y,_x);
                return{x:r*Math.cos(t+_theta)+50,y:r*Math.sin(t+_theta)+50};
            }
            ipcRenderer.on('setRotDeg',(event,data)=>{
                var arrowElem=document.getElementsByClassName('BubbleArrow')[0];
                var angle=data*Math.PI/180;
                var p=[rotXY(0,-10,angle),rotXY(50,0,angle),rotXY(0,10,angle)];
                arrowElem.style.clipPath=`polygon(${p[0].x}% ${p[0].y}%,${p[1].x}% ${p[1].y}%,${p[2].x}% ${p[2].y}%)`;
            });
		});
	</script>
</html>